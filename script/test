#!/bin/sh

set -e

PROJECT_ROOT_DIR="$(cd $(dirname "$0")/.. && pwd -P)"
SCRIPTS_DIR="${PROJECT_ROOT_DIR}/script"

if [ -z "${BUILD_DIR}" ]; then
    BUILD_DIR="${PROJECT_ROOT_DIR}/build"
fi

PROJECT_BINARY="${BUILD_DIR}/rest-in-pass"

get_path_level() {
    local ROOT_DIR="$(cd / && pwd -P)"
    local level=0

    if ! [ -d "$1" ]; then
        local full_path="$(cd $(dirname "$1") && pwd -P)"
    else
        local full_path="$(cd "$1" && pwd -P)"
    fi
    local current_path=${full_path}

    while [ "${current_path}" != "${ROOT_DIR}" ]; do
        local level=$(( ${level} + 1 ));
        local current_path="$(dirname ${current_path})"
    done

    echo "${level}"
}

run_project () {
    local project_command="${PROJECT_BINARY}"

    if ! [ -z "$1" ]; then
        local strip_level="$(get_path_level ${PROJECT_ROOT_DIR})"
        local coverage_prefix="GCOV_PREFIX_STRIP=${strip_level} GCOV_PREFIX=$1"
        local project_command="${coverage_prefix} ${project_command}"
    fi

    if ! [ -z "$2" ]; then
        local project_arguments="$2"
        local project_command="${project_command} ${project_arguments}"
    fi

    eval "${project_command} > /dev/null &"

    echo $!
}

stop_project () {
    local time_left=10
    local interval=0.1

    # send SIGINT signal to PID, log any output, early return if command fails
    eval "kill -2 $1" >> ${LOG_FILE} 2>&1 || return 0

    # check if PID file exists, every {interval} seconds,
    # until {time_left} reaches 0 seconds.
    while [ -e /proc/$1 ]
    do
        sleep ${interval}
        # bc is used to support floating point precision arithmetics
        time_left=$( echo ${time_left} - ${interval} | bc )
        comparison_status=$(echo "${time_left} <= 0" | bc)
        if [ ${comparison_status} -eq 1 ]; then
            # Warn about processes that fail to stop during timeout
            echo "WARNING! Timeout is reached when waiting for PID $1 to stop!"
            break
        fi
    done
}

sudo -v

if [ ! -x "${BUILD_DIR}/project" ]
then
    echo "Project binary not found!"
    exit 1
fi

REGULAR_PROJECT_PID=$(run_project "secure" "-c ${PROJECT_ROOT_DIR}/tests/rest/secure.cfg")
SECURE_PROJECT_PID=$(run_project "secure" "-c ${PROJECT_ROOT_DIR}/tests/rest/secure.cfg")

test_status=1
if eval "cd ${PROJECT_ROOT_DIR}/tests/rest" && npm install && npm test
then
    test_status=0
fi
cd -

stop_project $REGULAR_PUNICA_PID
stop_project $SECURE_PUNICA_PID

exit $test_status
