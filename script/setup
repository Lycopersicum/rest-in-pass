#!/bin/bash

set -e
set -x

PROJECT_ROOT_DIR="$(cd $(dirname "$0")/.. && pwd -P)"
SCRIPTS_DIR="${PROJECT_ROOT_DIR}/script"
DEFAULT_LOG_DIR="${PROJECT_ROOT_DIR}/script/log"

if [ -z "${BUILD_DIR}" ]; then
    BUILD_DIR="${PROJECT_ROOT_DIR}/build"
fi

if [ -z "${PREFIX_PATH_DIR}" ]; then
    PREFIX_PATH_DIR="${BUILD_DIR}"
fi

SCRIPT_NAME=$(basename -- "$0")
TIMESTAMP=$(date +"%Y-%m-%d_%H-%M-%S")

if [ -z "${LOG_FILE}" ]; then
    if [ ! -d "${DEFAULT_LOG_DIR}" ]; then
        eval "mkdir ${DEFAULT_LOG_DIR}"
    fi

    LOG_FILE="${DEFAULT_LOG_DIR}/${SCRIPT_NAME}_${TIMESTAMP}.log"
else
    export LOG_FILE
fi

CMAKE_ARGS_BASE="-DCMAKE_INSTALL_PREFIX:PATH=${PREFIX_PATH_DIR} -DCMAKE_PREFIX_PATH=${PREFIX_PATH_DIR}"

build_project () {
    cmake_arguments="${CMAKE_ARGS_BASE} $@"
    mkdir -p ${BUILD_DIR}/src &&
    eval "cd ${BUILD_DIR}" &&

    {
        eval "cmake ${cmake_arguments} ${PROJECT_ROOT_DIR}" &&
        make &&
        cd -
    } >> ${LOG_FILE} 2>&1 || {
        (>&2 echo "Failed to build rest-in-pass!")
        (>&2 echo "\nFor more information refer to ${LOG_FILE}")

        return 1
    }
}

if [ ! "${SKIP_BOOTSTRAP}" = "true" ]; then
    export BUILD_DIR
    export PREFIX_PATH_DIR
    eval "${SCRIPTS_DIR}/bootstrap"
fi

echo "==> Building rest-in-pass..."
build_project "$@"
eval "strip -s ${BUILD_DIR}/rest-in-pass"

echo "Finished setting up rest-in-pass!"
